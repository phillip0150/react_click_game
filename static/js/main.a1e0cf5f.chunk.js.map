{"version":3,"sources":["components/Game/index.js","components/Wrapper/index.js","components/Title/index.js","components/Score/index.js","App.js","serviceWorker.js","index.js"],"names":["Game","props","react_default","a","createElement","className","onClick","addScore","id","alt","name","src","image","Wrapper","children","Title","Score","score","highScore","App","state","zim","sort","b","Math","random","checkZim","x","console","log","_this","setState","push","_this2","this","components_Wrapper","components_Title","components_Score","map","zims","components_Game","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+lFAmBeA,MAhBf,SAAcC,GACZ,OAGAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,WAAML,EAAMM,SAASN,EAAMO,MAC1DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,mBCJ1BC,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,iBCI1BC,MALf,SAAed,GAEb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQI,IAAI,mBAAmBE,IAAI,4UCE5CK,MAJf,SAAef,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,eAAmCJ,EAAMgB,MAAzC,uBAAoEhB,EAAMiB,YCgEhEC,6MAtDjBC,MAAQ,CACNC,IAAKA,EAAIC,KAAK,SAAUnB,EAAGoB,GAAI,OAAOC,KAAKC,SAAW,KACtDR,MAAO,EACPS,SAAU,GACVR,UAAW,KAGbX,SAAW,SAAAC,GAGT,IAAI,IAAImB,KADRC,QAAQC,IAAI,WAAWrB,GACVsB,EAAKV,MAAMM,SACtB,GAAGI,EAAKV,MAAMM,SAASC,KAAKnB,EAM1B,YALGsB,EAAKV,MAAMH,MAAQa,EAAKV,MAAMF,UACjCY,EAAKC,SAAS,CAAEL,SAAS,GAAIT,MAAO,EAAGC,UAAWY,EAAKV,MAAMH,MAAOI,IAAKA,EAAIC,KAAK,SAAUnB,EAAGoB,GAAI,OAAOC,KAAKC,SAAW,OAE1HK,EAAKC,SAAS,CAAEL,SAAS,GAAIT,MAAO,EAAGI,IAAKA,EAAIC,KAAK,SAAUnB,EAAGoB,GAAI,OAAOC,KAAKC,SAAW,QAKjGK,EAAKV,MAAMM,SAASM,KAAKxB,GACtBsB,EAAKV,MAAMF,WAAaY,EAAKV,MAAMH,OACtCa,EAAKC,SAAS,CAACb,UAAWY,EAAKV,MAAMH,MAAM,IAE3CW,QAAQC,IAAIC,EAAKV,MAAMM,UAGvBI,EAAKC,SAAS,CAAEd,MAAOa,EAAKV,MAAMH,MAAO,EAAGI,IAAKA,EAAIC,KAAK,SAAUnB,EAAGoB,GAAI,OAAOC,KAAKC,SAAW,OAClGG,QAAQC,IAAIC,EAAKV,MAAMH,gFAMjB,IAAAgB,EAAAC,KACN,OACEhC,EAAAC,EAAAC,cAAC+B,EAAD,KACEjC,EAAAC,EAAAC,cAACgC,EAAD,wBACAlC,EAAAC,EAAAC,cAACiC,EAAD,CAAOpB,MAAOiB,KAAKd,MAAMH,MAAOC,UAAWgB,KAAKd,MAAMF,YACtDhB,EAAAC,EAAAC,cAAA,WACC8B,KAAKd,MAAMC,IAAIiB,IAAI,SAAAC,GAAI,OACxBrC,EAAAC,EAAAC,cAACoC,EAAD,CACEjC,SAAU0B,EAAK1B,SACfC,GAAI+B,EAAK/B,GACTiC,IAAKF,EAAK/B,GACVE,KAAM6B,EAAK7B,KACXE,MAAO2B,EAAK3B,kBAhDJ8B,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a1e0cf5f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Game(props) {\n  return (\n\n\n  <div className=\"card\" onClick={()=>{ props.addScore(props.id);}}>\n  <div className=\"card-content\">\n    <span>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </span>\n  </div>\n  </div>\n  );\n}\n\nexport default Game;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  // return <h1 className=\"title\">{props.children}</h1>;\n  return <img className=\"image\" alt=\"Invader Zim Logo\" src=\"https://res.cloudinary.com/teepublic/image/private/s--KNje6KbY--/t_Resized%20Artwork/c_fit,g_north_west,h_1054,w_1054/co_ffffff,e_outline:53/co_ffffff,e_outline:inner_fill:53/co_bbbbbb,e_outline:3:1000/c_mpad,g_center,h_1260,w_1260/b_rgb:eeeeee/c_limit,f_jpg,h_630,q_90,w_630/v1535216533/production/designs/3067431_0.jpg\" ></img>\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Score(props) {\n  return <h2 className=\"score\">Your Score: {props.score} | Your High Score: {props.highScore}</h2>;\n}\n\nexport default Score;\n","import React, { Component } from \"react\";\nimport zim from \"./friends.json\";\nimport './App.css';\nimport Game from \"./components/Game\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Score from \"./components/Score\";\n\n\n\n\n\nclass App extends Component{\n  \n  state = {\n    zim: zim.sort(function (a, b) {return Math.random() - 0.5;}),\n    score: 0,\n    checkZim: [],\n    highScore: 0\n  };\n\n  addScore = id => {\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    console.log(\"The id: \"+id);\n    for(var x in this.state.checkZim){\n      if(this.state.checkZim[x]===id){\n        if(this.state.score > this.state.highScore){\n        this.setState({ checkZim:[], score: 0, highScore: this.state.score, zim: zim.sort(function (a, b) {return Math.random() - 0.5;})});\n        } else {\n        this.setState({ checkZim:[], score: 0, zim: zim.sort(function (a, b) {return Math.random() - 0.5;})});\n        }\n        return;\n      }\n    }\n    this.state.checkZim.push(id);\n    if(this.state.highScore <= this.state.score){\n    this.setState({highScore: this.state.score+1});\n    }\n    console.log(this.state.checkZim);\n\n    // Set this.state.friends equal to the new friends array\n    this.setState({ score: this.state.score +1, zim: zim.sort(function (a, b) {return Math.random() - 0.5;})});\n    console.log(this.state.score)\n  };\n  \n\n\n\n  render(){\n    return (\n      <Wrapper>\n        <Title>Zim Click Game!</Title>\n        <Score score={this.state.score} highScore={this.state.highScore}></Score>\n        <br></br>\n        {this.state.zim.map(zims => (\n        <Game\n          addScore={this.addScore}\n          id={zims.id}\n          key={zims.id}\n          name={zims.name}\n          image={zims.image}\n        />\n        ))}\n        </Wrapper>\n        );\n      }\n    }\n    \n    export default App;\n    ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}